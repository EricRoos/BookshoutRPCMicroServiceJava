/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

import org.apache.thrift.protocol.TProtocolException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class ListData extends org.apache.thrift.TUnion<ListData, ListData._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListData");
  private static final org.apache.thrift.protocol.TField PROMO_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("promoCodes", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PROMOS_FIELD_DESC = new org.apache.thrift.protocol.TField("promos", org.apache.thrift.protocol.TType.LIST, (short)2);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROMO_CODES((short)1, "promoCodes"),
    PROMOS((short)2, "promos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROMO_CODES
          return PROMO_CODES;
        case 2: // PROMOS
          return PROMOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROMO_CODES, new org.apache.thrift.meta_data.FieldMetaData("promoCodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PromoCode.class))));
    tmpMap.put(_Fields.PROMOS, new org.apache.thrift.meta_data.FieldMetaData("promos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Promo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ListData.class, metaDataMap);
  }

  public ListData() {
    super();
  }

  public ListData(_Fields setField, Object value) {
    super(setField, value);
  }

  public ListData(ListData other) {
    super(other);
  }
  public ListData deepCopy() {
    return new ListData(this);
  }

  public static ListData promoCodes(List<PromoCode> value) {
    ListData x = new ListData();
    x.setPromoCodes(value);
    return x;
  }

  public static ListData promos(List<Promo> value) {
    ListData x = new ListData();
    x.setPromos(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case PROMO_CODES:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<PromoCode> for field 'promoCodes', but got " + value.getClass().getSimpleName());
      case PROMOS:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<Promo> for field 'promos', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case PROMO_CODES:
          if (field.type == PROMO_CODES_FIELD_DESC.type) {
            List<PromoCode> promoCodes;
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              promoCodes = new ArrayList<PromoCode>(_list0.size);
              PromoCode _elem1;
              for (int _i2 = 0; _i2 < _list0.size; ++_i2)
              {
                _elem1 = new PromoCode();
                _elem1.read(iprot);
                promoCodes.add(_elem1);
              }
              iprot.readListEnd();
            }
            return promoCodes;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PROMOS:
          if (field.type == PROMOS_FIELD_DESC.type) {
            List<Promo> promos;
            {
              org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
              promos = new ArrayList<Promo>(_list3.size);
              Promo _elem4;
              for (int _i5 = 0; _i5 < _list3.size; ++_i5)
              {
                _elem4 = new Promo();
                _elem4.read(iprot);
                promos.add(_elem4);
              }
              iprot.readListEnd();
            }
            return promos;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PROMO_CODES:
        List<PromoCode> promoCodes = (List<PromoCode>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, promoCodes.size()));
          for (PromoCode _iter6 : promoCodes)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case PROMOS:
        List<Promo> promos = (List<Promo>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, promos.size()));
          for (Promo _iter7 : promos)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case PROMO_CODES:
          List<PromoCode> promoCodes;
          {
            org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
            promoCodes = new ArrayList<PromoCode>(_list8.size);
            PromoCode _elem9;
            for (int _i10 = 0; _i10 < _list8.size; ++_i10)
            {
              _elem9 = new PromoCode();
              _elem9.read(iprot);
              promoCodes.add(_elem9);
            }
            iprot.readListEnd();
          }
          return promoCodes;
        case PROMOS:
          List<Promo> promos;
          {
            org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
            promos = new ArrayList<Promo>(_list11.size);
            Promo _elem12;
            for (int _i13 = 0; _i13 < _list11.size; ++_i13)
            {
              _elem12 = new Promo();
              _elem12.read(iprot);
              promos.add(_elem12);
            }
            iprot.readListEnd();
          }
          return promos;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case PROMO_CODES:
        List<PromoCode> promoCodes = (List<PromoCode>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, promoCodes.size()));
          for (PromoCode _iter14 : promoCodes)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case PROMOS:
        List<Promo> promos = (List<Promo>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, promos.size()));
          for (Promo _iter15 : promos)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case PROMO_CODES:
        return PROMO_CODES_FIELD_DESC;
      case PROMOS:
        return PROMOS_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public List<PromoCode> getPromoCodes() {
    if (getSetField() == _Fields.PROMO_CODES) {
      return (List<PromoCode>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'promoCodes' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPromoCodes(List<PromoCode> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PROMO_CODES;
    value_ = value;
  }

  public List<Promo> getPromos() {
    if (getSetField() == _Fields.PROMOS) {
      return (List<Promo>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'promos' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPromos(List<Promo> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PROMOS;
    value_ = value;
  }

  public boolean isSetPromoCodes() {
    return setField_ == _Fields.PROMO_CODES;
  }


  public boolean isSetPromos() {
    return setField_ == _Fields.PROMOS;
  }


  public boolean equals(Object other) {
    if (other instanceof ListData) {
      return equals((ListData)other);
    } else {
      return false;
    }
  }

  public boolean equals(ListData other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ListData other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
